
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error, accuracy_score, classification_report
import streamlit as st
import pickle
data = pd.read_csv('your_dataset.csv')

print(data.info())
print(data.describe())

data['material_ref'] = data['material_ref'].replace('0000000000000000000000000000000000000000', np.nan)

data.fillna(data.median(numeric_only=True), inplace=True
numeric_cols = data.select_dtypes(include=np.number).columns
for col in numeric_cols:
    sns.boxplot(data[col])
    plt.title(f'Boxplot of {col}')
    plt.show() 
for col in numeric_cols:
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    data[col] = np.clip(data[col], lower_bound, upper_bound)

for col in numeric_cols:
    if abs(data[col].skew()) > 1:
        data[col] = np.log1p(data[col]) 
categorical_cols = data.select_dtypes(include='object').columns
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col].astype(str))
    label_encoders[col] = le
data.drop(['id', 'item_date'], axis=1, inplace=True)

regression_data = data.drop('status', axis=1)
classification_data = data.drop('selling_price', axis=1)

X_reg = regression_data.drop('selling_price', axis=1)
y_reg = regression_data['selling_price']
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg, y_reg, test_size=0.2, random_state=42)

regressor = RandomForestRegressor(random_state=42)
regressor.fit(X_train_reg, y_train_reg)
y_pred_reg = regressor.predict(X_test_reg)
print(f'Regression RMSE: {np.sqrt(mean_squared_error(y_test_reg, y_pred_reg))}')

X_clf = classification_data.drop('status', axis=1)
y_clf = classification_data['status']
X_train_clf, X_test_clf, y_train_clf, y_test_clf = train_test_split(X_clf, y_clf, test_size=0.2, random_state=42)

classifier = RandomForestClassifier(random_state=42)
classifier.fit(X_train_clf, y_train_clf)
y_pred_clf = classifier.predict(X_test_clf)
print(f'Classification Accuracy: {accuracy_score(y_test_clf, y_pred_clf)}')
print(classification_report(y_test_clf, y_pred_clf))

with open('regressor.pkl', 'wb') as f:
    pickle.dump(regressor, f)
with open('classifier.pkl', 'wb') as f:
    pickle.dump(classifier, f)
with open('encoders.pkl', 'wb') as f:
    pickle.dump(label_encoders, f)

st.title("Copper Industry Prediction")
task = st.radio("Choose Task", ["Regression (Selling Price)", "Classification (Status)"])

if task == "Regression (Selling Price)":
    input_data = []
    for col in X_reg.columns:
        val = st.number_input(f"Enter {col}")
        input_data.append(val)
    if st.button("Predict Selling Price"):
        with open('regressor.pkl', 'rb') as f:
            model = pickle.load(f)
        prediction = model.predict([input_data])
        st.write(f"Predicted Selling Price: {prediction[0]}")
elif task == "Classification (Status)":
    input_data = []
    for col in X_clf.columns:
        val = st.number_input(f"Enter {col}")
        input_data.append(val)
    if st.button("Predict Status"):
        with open('classifier.pkl', 'rb') as f:
            model = pickle.load(f)
        prediction = model.predict([input_data])
        status = "Won" if prediction[0] == 1 else "Lost"
        st.write(f"Predicted Status: {status}")
